// databeat v0.1.0 05b62e4c87147149adb52dd13fe2de8c53a3c72f
// --
// Code generated by webrpc-gen@v0.14.0-dev with golang generator. DO NOT EDIT.
//
// webrpc-gen -schema=databeat.ridl -target=golang -pkg=proto -client -out=./clients/databeat.gen.go
package proto

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"time"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.1.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "05b62e4c87147149adb52dd13fe2de8c53a3c72f"
}

//
// Types
//

type EventType uint32

const (
	EventType_INIT    EventType = 0
	EventType_VIEW    EventType = 1
	EventType_REQUEST EventType = 2
)

var EventType_name = map[uint32]string{
	0: "INIT",
	1: "VIEW",
	2: "REQUEST",
}

var EventType_value = map[string]uint32{
	"INIT":    0,
	"VIEW":    1,
	"REQUEST": 2,
}

func (x EventType) String() string {
	return EventType_name[uint32(x)]
}

func (x EventType) MarshalText() ([]byte, error) {
	return []byte(EventType_name[uint32(x)]), nil
}

func (x *EventType) UnmarshalText(b []byte) error {
	*x = EventType(EventType_value[string(b)])
	return nil
}

type Ident uint8

const (
	Ident_ANONYMOUS Ident = 0
	Ident_PRIVATE   Ident = 1
	Ident_USER      Ident = 2
	Ident_SERVICE   Ident = 3
)

var Ident_name = map[uint8]string{
	0: "ANONYMOUS",
	1: "PRIVATE",
	2: "USER",
	3: "SERVICE",
}

var Ident_value = map[string]uint8{
	"ANONYMOUS": 0,
	"PRIVATE":   1,
	"USER":      2,
	"SERVICE":   3,
}

func (x Ident) String() string {
	return Ident_name[uint8(x)]
}

func (x Ident) MarshalText() ([]byte, error) {
	return []byte(Ident_name[uint8(x)]), nil
}

func (x *Ident) UnmarshalText(b []byte) error {
	*x = Ident(Ident_value[string(b)])
	return nil
}

type Version struct {
	WebrpcVersion string `json:"webrpcVersion"`
	SchemaVersion string `json:"schemaVersion"`
	SchemaHash    string `json:"schemaHash"`
	AppVersion    string `json:"appVersion"`
}

type RuntimeStatus struct {
	HealthOK      bool                   `json:"healthOK"`
	StartTime     time.Time              `json:"startTime"`
	Uptime        uint64                 `json:"uptime"`
	Ver           string                 `json:"ver"`
	Branch        string                 `json:"branch"`
	CommitHash    string                 `json:"commitHash"`
	SinkStats     *SinkStats             `json:"sinkStats"`
	PipelineStats map[string]interface{} `json:"pipelineStats"`
	GcpPubSub     bool                   `json:"gcpPubSub"`
}

type SinkStats struct {
	NumEvents uint64 `json:"numEvents"`
	NumFails  uint64 `json:"numFails"`
}

type App struct {
	UID      string   `json:"uid" ch:"uid"`
	Name     string   `json:"name" ch:"name"`
	Domains  []string `json:"domains" ch:"domains"`
	Disabled bool     `json:"disabled" ch:"disabled"`
}

type Event struct {
	Event       string                 `json:"event"`
	ProjectID   uint64                 `json:"projectId"`
	Source      string                 `json:"source"`
	Ident       uint8                  `json:"ident"`
	UserID      *string                `json:"userId"`
	SessionID   *string                `json:"sessionId"`
	Device      *Device                `json:"device"`
	CountryCode *string                `json:"countryCode"`
	Props       map[string]string      `json:"props"`
	Nums        map[string]float64     `json:"nums"`
	Etc         map[string]interface{} `json:"-" ch:"-"`
}

type Device struct {
	Type           string `json:"type"`
	OS             string `json:"os"`
	OSVersion      string `json:"osVersion"`
	Browser        string `json:"browser"`
	BrowserVersion string `json:"browserVersion"`
}

type RawEvent struct {
	App                  *string                `json:"app" ch:"app"`
	TS                   *time.Time             `json:"ts" ch:"ts"`
	Event                string                 `json:"event" ch:"event"`
	ProjectID            uint64                 `json:"projectId" ch:"project_id"`
	Source               string                 `json:"source" ch:"source"`
	Ident                uint8                  `json:"ident" ch:"ident"`
	UserID               *string                `json:"userId" ch:"user_id"`
	SessionID            *string                `json:"sessionId" ch:"session_id"`
	CountryCode          *string                `json:"countryCode" ch:"country"`
	DeviceType           *string                `json:"deviceType" ch:"device_type"`
	DeviceOS             *string                `json:"deviceOs" ch:"device_os"`
	DeviceOSVersion      *string                `json:"deviceOsVersion" ch:"device_os_ver"`
	DeviceBrowser        *string                `json:"deviceBrowser" ch:"device_browser"`
	DeviceBrowserVersion *string                `json:"deviceBrowserVersion" ch:"device_browser_ver"`
	Props                map[string]string      `json:"props" ch:"props"`
	Nums                 map[string]float64     `json:"nums" ch:"nums"`
	Etc                  map[string]interface{} `json:"-" ch:"-"`
}

type Databeat interface {
	Ping(ctx context.Context) (bool, error)
	Version(ctx context.Context) (*Version, error)
	RuntimeStatus(ctx context.Context) (*RuntimeStatus, error)
	Tick(ctx context.Context, events []*Event) (bool, error)
	RawEvents(ctx context.Context, events []*RawEvent) (bool, error)
}

type DatabeatAdmin interface {
	ListApps(ctx context.Context) ([]*App, error)
	CreateApp(ctx context.Context, uid string, name string, domains []string) (*App, error)
	GetApp(ctx context.Context, appUid string) (*App, error)
	UpdateApp(ctx context.Context, app *App) (bool, error)
	DisableApp(ctx context.Context, appUid string, disabled bool) (bool, error)
}

type DatabeatQuery interface {
	QueryDateRange(ctx context.Context, appUid string, event string, from time.Time, to time.Time) (interface{}, error)
}

var WebRPCServices = map[string][]string{
	"Databeat": {
		"Ping",
		"Version",
		"RuntimeStatus",
		"Tick",
		"RawEvents",
	},
	"DatabeatAdmin": {
		"ListApps",
		"CreateApp",
		"GetApp",
		"UpdateApp",
		"DisableApp",
	},
	"DatabeatQuery": {
		"QueryDateRange",
	},
}

//
// Client
//

const DatabeatPathPrefix = "/rpc/Databeat/"
const DatabeatAdminPathPrefix = "/rpc/DatabeatAdmin/"
const DatabeatQueryPathPrefix = "/rpc/DatabeatQuery/"

type databeatClient struct {
	client HTTPClient
	urls   [5]string
}

func NewDatabeatClient(addr string, client HTTPClient) Databeat {
	prefix := urlBase(addr) + DatabeatPathPrefix
	urls := [5]string{
		prefix + "Ping",
		prefix + "Version",
		prefix + "RuntimeStatus",
		prefix + "Tick",
		prefix + "RawEvents",
	}
	return &databeatClient{
		client: client,
		urls:   urls,
	}
}

func (c *databeatClient) Ping(ctx context.Context) (bool, error) {
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[0], nil, &out)
	return out.Ret0, err
}

func (c *databeatClient) Version(ctx context.Context) (*Version, error) {
	out := struct {
		Ret0 *Version `json:"version"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[1], nil, &out)
	return out.Ret0, err
}

func (c *databeatClient) RuntimeStatus(ctx context.Context) (*RuntimeStatus, error) {
	out := struct {
		Ret0 *RuntimeStatus `json:"status"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[2], nil, &out)
	return out.Ret0, err
}

func (c *databeatClient) Tick(ctx context.Context, events []*Event) (bool, error) {
	in := struct {
		Arg0 []*Event `json:"events"`
	}{events}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[3], in, &out)
	return out.Ret0, err
}

func (c *databeatClient) RawEvents(ctx context.Context, events []*RawEvent) (bool, error) {
	in := struct {
		Arg0 []*RawEvent `json:"events"`
	}{events}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[4], in, &out)
	return out.Ret0, err
}

type databeatAdminClient struct {
	client HTTPClient
	urls   [5]string
}

func NewDatabeatAdminClient(addr string, client HTTPClient) DatabeatAdmin {
	prefix := urlBase(addr) + DatabeatAdminPathPrefix
	urls := [5]string{
		prefix + "ListApps",
		prefix + "CreateApp",
		prefix + "GetApp",
		prefix + "UpdateApp",
		prefix + "DisableApp",
	}
	return &databeatAdminClient{
		client: client,
		urls:   urls,
	}
}

func (c *databeatAdminClient) ListApps(ctx context.Context) ([]*App, error) {
	out := struct {
		Ret0 []*App `json:"apps"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[0], nil, &out)
	return out.Ret0, err
}

func (c *databeatAdminClient) CreateApp(ctx context.Context, uid string, name string, domains []string) (*App, error) {
	in := struct {
		Arg0 string   `json:"uid"`
		Arg1 string   `json:"name"`
		Arg2 []string `json:"domains"`
	}{uid, name, domains}
	out := struct {
		Ret0 *App `json:"app"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[1], in, &out)
	return out.Ret0, err
}

func (c *databeatAdminClient) GetApp(ctx context.Context, appUid string) (*App, error) {
	in := struct {
		Arg0 string `json:"appUid"`
	}{appUid}
	out := struct {
		Ret0 *App `json:"app"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[2], in, &out)
	return out.Ret0, err
}

func (c *databeatAdminClient) UpdateApp(ctx context.Context, app *App) (bool, error) {
	in := struct {
		Arg0 *App `json:"app"`
	}{app}
	out := struct {
		Ret0 bool `json:"updated"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[3], in, &out)
	return out.Ret0, err
}

func (c *databeatAdminClient) DisableApp(ctx context.Context, appUid string, disabled bool) (bool, error) {
	in := struct {
		Arg0 string `json:"appUid"`
		Arg1 bool   `json:"disabled"`
	}{appUid, disabled}
	out := struct {
		Ret0 bool `json:"disabled"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[4], in, &out)
	return out.Ret0, err
}

type databeatQueryClient struct {
	client HTTPClient
	urls   [1]string
}

func NewDatabeatQueryClient(addr string, client HTTPClient) DatabeatQuery {
	prefix := urlBase(addr) + DatabeatQueryPathPrefix
	urls := [1]string{
		prefix + "QueryDateRange",
	}
	return &databeatQueryClient{
		client: client,
		urls:   urls,
	}
}

func (c *databeatQueryClient) QueryDateRange(ctx context.Context, appUid string, event string, from time.Time, to time.Time) (interface{}, error) {
	in := struct {
		Arg0 string    `json:"appUid"`
		Arg1 string    `json:"event"`
		Arg2 time.Time `json:"from"`
		Arg3 time.Time `json:"to"`
	}{appUid, event, from, to}
	out := struct {
		Ret0 interface{} `json:"result"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[0], in, &out)
	return out.Ret0, err
}

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

// doJSONRequest is common code to make a request to the remote service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) error {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to marshal JSON body: %w", err))
	}
	if err = ctx.Err(); err != nil {
		return ErrWebrpcRequestFailed.WithCause(fmt.Errorf("aborted because context was done: %w", err))
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return ErrWebrpcRequestFailed.WithCause(fmt.Errorf("could not build request: %w", err))
	}
	resp, err := client.Do(req)
	if err != nil {
		return ErrWebrpcRequestFailed.WithCause(err)
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}()

	if err = ctx.Err(); err != nil {
		return ErrWebrpcRequestFailed.WithCause(fmt.Errorf("aborted because context was done: %w", err))
	}

	if resp.StatusCode != 200 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to read server error response body: %w", err))
		}

		var rpcErr WebRPCError
		if err := json.Unmarshal(respBody, &rpcErr); err != nil {
			return ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to unmarshal server error: %w", err))
		}
		if rpcErr.Cause != "" {
			rpcErr.cause = errors.New(rpcErr.Cause)
		}
		return rpcErr
	}

	if out != nil {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to read response body: %w", err))
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to unmarshal JSON response body: %w", err))
		}
	}

	return nil
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Helpers
//

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}
	HTTPRequestCtxKey              = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)

func ServiceNameFromContext(ctx context.Context) string {
	service, _ := ctx.Value(ServiceNameCtxKey).(string)
	return service
}

func MethodNameFromContext(ctx context.Context) string {
	method, _ := ctx.Value(MethodNameCtxKey).(string)
	return method
}

func RequestFromContext(ctx context.Context) *http.Request {
	r, _ := ctx.Value(HTTPRequestCtxKey).(*http.Request)
	return r
}

//
// Errors
//

type WebRPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"msg"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"status"`
	cause      error
}

var _ error = WebRPCError{}

func (e WebRPCError) Error() string {
	if e.cause != nil {
		return fmt.Sprintf("%s %d: %s: %v", e.Name, e.Code, e.Message, e.cause)
	}
	return fmt.Sprintf("%s %d: %s", e.Name, e.Code, e.Message)
}

func (e WebRPCError) Is(target error) bool {
	if rpcErr, ok := target.(WebRPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e WebRPCError) Unwrap() error {
	return e.cause
}

func (e WebRPCError) WithCause(cause error) WebRPCError {
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Deprecated: Use .WithCause() method on WebRPCError.
func ErrorWithCause(rpcErr WebRPCError, cause error) WebRPCError {
	return rpcErr.WithCause(cause)
}

// Webrpc errors
var (
	ErrWebrpcEndpoint      = WebRPCError{Code: 0, Name: "WebrpcEndpoint", Message: "endpoint error", HTTPStatus: 400}
	ErrWebrpcRequestFailed = WebRPCError{Code: -1, Name: "WebrpcRequestFailed", Message: "request failed", HTTPStatus: 400}
	ErrWebrpcBadRoute      = WebRPCError{Code: -2, Name: "WebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadMethod     = WebRPCError{Code: -3, Name: "WebrpcBadMethod", Message: "bad method", HTTPStatus: 405}
	ErrWebrpcBadRequest    = WebRPCError{Code: -4, Name: "WebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse   = WebRPCError{Code: -5, Name: "WebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
	ErrWebrpcServerPanic   = WebRPCError{Code: -6, Name: "WebrpcServerPanic", Message: "server panic", HTTPStatus: 500}
	ErrWebrpcInternalError = WebRPCError{Code: -7, Name: "WebrpcInternalError", Message: "internal error", HTTPStatus: 500}
)

// Schema errors
var (
	ErrUnauthorized     = WebRPCError{Code: 1000, Name: "Unauthorized", Message: "Unauthorized access", HTTPStatus: 401}
	ErrPermissionDenied = WebRPCError{Code: 2000, Name: "PermissionDenied", Message: "Permission denied", HTTPStatus: 403}
	ErrSessionExpired   = WebRPCError{Code: 2001, Name: "SessionExpired", Message: "Session expired", HTTPStatus: 403}
	ErrNotFound         = WebRPCError{Code: 3000, Name: "NotFound", Message: "Resource not found", HTTPStatus: 404}
	ErrInvalidAppKey    = WebRPCError{Code: 4000, Name: "InvalidAppKey", Message: "Invalid app key", HTTPStatus: 400}
	ErrQueryFailed      = WebRPCError{Code: 4001, Name: "QueryFailed", Message: "DB query failed", HTTPStatus: 400}
)
